// Generated by CoffeeScript 1.4.0
(function() {
  var WebSocketServer, fs, sock, startServer, txtzymeDevice, tz;

  WebSocketServer = require('ws').Server;

  fs = require('fs');

  tz = null;

  sock = null;

  txtzymeDevice = function(done) {
    var result;
    result = null;
    if (process.platform === "win32") {
      return done("on windows...");
    }
    return fs.readdir('/dev', function(err, files) {
      var file, _i, _len;
      if (err) {
        done(err);
      }
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.match(/^ttyACM/)) {
          result = file;
        }
        if (file.match(/^cu.usbmodem1234/)) {
          result = file;
        }
      }
      if (result) {
        return done(null, "/dev/" + result);
      }
      return done("can't find txtzyme device");
    });
  };

  startServer = function(params) {
    var k, server, v;
    console.log('txtzyme startServer', (function() {
      var _results;
      _results = [];
      for (k in params) {
        v = params[k];
        _results.push(k);
      }
      return _results;
    })());
    txtzymeDevice(function(err, fn) {
      if (err) {
        return console.log(err);
      }
      return fs.open(fn, 'r+', function(err, fd) {
        var copybuf, read, readbuf;
        if (err) {
          return console.log('txtzyme open error: ', err);
        }
        tz = {
          fd: fd,
          fn: fn
        };
        console.log(tz);
        readbuf = new Buffer(128);
        copybuf = new Buffer(128);
        read = function(remains) {
          return fs.read(tz.fd, readbuf, remains, readbuf.length - remains, null, function(err, bytesRead, buffer) {
            var have, i, tail, take, _i, _ref;
            if (err) {
              return console.log('txtzyme read err ', err);
            }
            have = bytesRead + remains;
            for (i = _i = _ref = have - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
              if (buffer[i] === 10) {
                take = buffer.toString('ascii', 0, (tail = i + 1));
                if (sock) {
                  sock.send(take, function(err) {
                    if (err) {
                      return console.log('txtzyme send err', err);
                    }
                  });
                }
                remains = have - tail;
                if (remains) {
                  buffer.copy(copybuf, 0, tail, have);
                  copybuf.copy(readbuf, 0, 0, remains);
                }
                return read(remains);
              }
            }
            return read(have);
          });
        };
        return read(0);
      });
    });
    server = new WebSocketServer({
      server: params.server,
      path: '/plugin/txtzyme'
    });
    return server.on('connection', function(socket) {
      console.log('connection established, listening');
      sock = socket;
      return socket.on('message', function(message) {
        var buf;
        buf = new Buffer("" + message + "\n", 'utf8');
        if (tz == null) {
          return;
        }
        return fs.write(tz.fd, buf, 0, buf.length, -1, function(err, written, buffer) {
          if (err) {
            console.log('txtzyme write error: ', err);
          }
          return fs.fsync(tz.fd);
        });
      });
    });
  };

  module.exports = {
    startServer: startServer
  };

}).call(this);
